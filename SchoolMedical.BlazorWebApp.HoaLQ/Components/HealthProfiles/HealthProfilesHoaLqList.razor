@page "/HealthProfiles/HealthProfilesList"
@using SchoolMedical.Repositories.HoaLQ.Models
@attribute [StreamRendering]
@attribute [Authorize]

<style>
    .pagination-container {
        position: sticky;
        bottom: 0;
        z-index: 1020;

        background-color: rgba(255, 255, 255, 0.75);
        backdrop-filter: blur(8px) saturate(150%);
        -webkit-backdrop-filter: blur(8px) saturate(150%);
        box-shadow: 0 -1px 8px rgba(0, 0, 0, 0.1);
        padding: 1rem;
        border-top: 1px solid rgba(0, 0, 0, 0.05);
    }
    .pagination {
        border-radius: 0.5rem;
    }
    .pagination .page-link {
        transition: all 0.2s ease-in-out;
        border-radius: 0.375rem;
        margin: 0 2px;
        border-color: transparent; 
    }

    .pagination .page-item:not(.disabled) .page-link:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: var(--bs-primary);
        color: white;
        border-color: var(--bs-primary);
    }
    .pagination .page-item.active .page-link {
        box-shadow: 0 2px 6px rgba(var(--bs-primary-rgb), 0.5);
        transform: translateY(-1px);
    }
    .pagination .page-item.active .page-link:hover {
        transform: translateY(-1px);
        cursor: default;
    }
    .pagination .page-item.disabled .page-link {
        opacity: 0.6;
        cursor: not-allowed;
    }
</style>
<AuthorizeView Roles="1">
<div class="mb-3">
    <a href="/HealthProfiles/HealthProfilesForm/" class="btn btn-success"><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-shield-fill-plus" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M8 0c-.69 0-1.843.265-2.928.56-1.11.3-2.229.655-2.887.87a1.54 1.54 0 0 0-1.044 1.262c-.596 4.477.787 7.795 2.465 9.99a11.8 11.8 0 0 0 2.517 2.453c.386.273.744.482 1.048.625.28.132.581.24.829.24s.548-.108.829-.24a7 7 0 0 0 1.048-.625 11.8 11.8 0 0 0 2.517-2.453c1.678-2.195 3.061-5.513 2.465-9.99a1.54 1.54 0 0 0-1.044-1.263 63 63 0 0 0-2.887-.87C9.843.266 8.69 0 8 0m-.5 5a.5.5 0 0 1 1 0v1.5H10a.5.5 0 0 1 0 1H8.5V9a.5.5 0 0 1-1 0V7.5H6a.5.5 0 0 1 0-1h1.5z"/>
    </svg> Tạo mới hồ sơ</a>
</div>
</AuthorizeView>
@if (isLoading)
{
    <p  class="text-center">
       <img src="https://i.pinimg.com/originals/41/83/c4/4183c45ac4d96bbd2933ff65810bf5f7.gif" alt="Loading..." />
    </p>
}
else
{
    <h3>Tìm kiếm Hồ sơ sức khỏe</h3>

    <div class="row g-3 mb-4">
        <div class="col-md-3">
            <InputText @bind-Value="SearchModel.BloodType" class="form-control" placeholder="Nhóm máu" />
        </div>
        <div class="col-md-3">
            <InputText @bind-Value="SearchModel.StudentName" class="form-control" placeholder="Tên học sinh" />
        </div>
        <div class="col-md-2">
            <InputNumber @bind-Value="SearchModel.Weight" class="form-control" placeholder="Cân nặng" />
        </div>
        <div class="col-md-2">
            <InputNumber @bind-Value="SearchModel.Height" class="form-control" placeholder="Chiều cao" />
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary w-100" @onclick="SearchAsync">Tìm kiếm</button>
        </div>
    </div>
    <div style="min-height: 515px">
    <table class="table table-bordered table-hover table-striped align-middle text-center shadow-sm rounded bg-white">
        <thead class="table-dark">
        <tr>
            <th>STT</th>
            <th>Học sinh</th>
            <th>Chiều cao (cm)</th>
            <th>Cân nặng (kg)</th>
            <th>Nhóm máu</th>
            <th><div class="dropdown">
                    <a class="text-white text-decoration-none dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                        Giới tính
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-funnel-fill" viewBox="0 0 16 16">
                            <path d="M1.5 1.5A.5.5 0 0 1 2 1h12a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.128.334L10 8.692V13.5a.5.5 0 0 1-.342.474l-3 1A.5.5 0 0 1 6 14.5V8.692L1.628 3.834A.5.5 0 0 1 1.5 3.5z"/>
                        </svg>
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" style="cursor: pointer" @onclick='() => FilterBySex(true)'>Lọc theo Nam</a></li>
                        <li><a class="dropdown-item" style="cursor: pointer" @onclick='() => FilterBySex(false)'>Lọc theo Nữ</a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" style="cursor: pointer" @onclick='() => FilterBySex(null)'>Hiển thị tất cả</a></li>
                    </ul>
                </div>
            </th>
            <th>Ngày sinh</th>
            <th>Thao tác</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var healthProfile in healthProfiles.Select((value, index) => new {value, index}))
        {
            <tr>
                <td>@((currentPage - 1) * pageSize + healthProfile.index + 1)</td>
                <td>@healthProfile.value.Student.StudentFullName</td>
                <td>@healthProfile.value.Height</td>
                <td>@healthProfile.value.Weight</td>
                <td>
                    <span class="@(string.IsNullOrEmpty(healthProfile.value.BloodType) ? "text-danger" : "text-primary")">
                        @(string.IsNullOrEmpty(healthProfile.value.BloodType) ? "--" : healthProfile.value.BloodType)
                    </span>
                </td>
                <td>
                    <span class="@(healthProfile.value.Sex ? "text-primary" : "text-danger")">
                        @(healthProfile.value.Sex ? "Nam" : "Nữ")
                    </span>
                </td>
                <td>@(healthProfile.value.DateOfBirth.HasValue ? healthProfile.value.DateOfBirth.Value.ToString("dd/MM/yyyy") : "--")</td>
                <td>
                    <div class="flex flex-row align-items-center gap-2">
                        <!-- Hàng trên: Chi tiết + Sửa -->
                        <a class="btn btn-sm btn-info text-white rounded-3"
                           href="/HealthProfiles/HealthProfilesDetail/@healthProfile.value.HealthProfileHoaLqid">
                            Chi tiết
                        </a>
                        <AuthorizeView Roles="1" >
                            <a class="btn btn-sm btn-warning text-white rounded-3"
                               href="/HealthProfiles/HealthProfilesForm/@healthProfile.value.HealthProfileHoaLqid">
                                Sửa
                            </a>
                            </AuthorizeView>
                    </div>
                </td>
            </tr>
        }
        </tbody>
    </table>
    </div>
    @if (TotalPages > 0)
    {
        <div class="d-flex justify-content-between align-items-center mt-3 p-3 bg-body-tertiary pagination-container bg-opacity-70">
        
            <span>
                Hiển thị <strong>@healthProfiles.Count</strong> trong tổng số <strong>@totalItems</strong> hồ sơ.
            </span>

            <nav aria-label="Page navigation">
                <ul class="pagination shadow-sm mb-0">
                    @* Nút "Trang trước" *@
                    <li class="page-item @(currentPage == 1 ? "disabled " : "")">
                        <button class="page-link" @onclick="() => ChangePageAsync(currentPage - 1)" aria-label="Previous">
                            <span aria-hidden="true">‹</span>
                        </button>
                    </li>

                    @* Dùng vòng lặp để hiển thị các nút số trang *@
                    @foreach (var pageNum in VisiblePageNumbers)
                    {
                        <li class="page-item @(pageNum == currentPage ? "active" : "")">
                            <button class="page-link" @onclick="() => ChangePageAsync(pageNum)">@pageNum</button>
                        </li>
                    }

                    @* Nút "Trang sau" *@
                    <li class="page-item @(currentPage >= TotalPages ? "disabled" : "")">
                        <button class="page-link" @onclick="() => ChangePageAsync(currentPage + 1)" aria-label="Next">
                            <span aria-hidden="true">›</span>
                        </button>
                    </li>
                </ul>
            </nav>
        </div>
    }
}

@code {
    private class SearchModelDto
    {
        public string BloodType { get; set; } = string.Empty;
        public string StudentName { get; set; } = string.Empty;
        public int? Weight { get; set; }
        public int? Height { get; set; }
        public bool? Sex { get; set; }
    }
    
    private int currentPage = 1;    
    private int pageSize = 10;      
    private int totalItems = 0; 
    private const int MaxVisiblePages = 3;
    
    private int TotalPages => (int)Math.Ceiling(totalItems / (double)pageSize);
    private SearchModelDto SearchModel = new();
    private List<HealthProfilesHoaLq> healthProfiles = new();
    private bool isLoading = true;
    protected override async Task OnInitializedAsync()
    {
       await LoadDataAsync();
    }
    private async Task LoadDataAsync()
    {
        isLoading = true;
        await Task.Delay(250); 
        var paginatedResult = await ServiceProvider.HealthProfilesHoaLqService.SearchAsync(
            SearchModel.BloodType, 
            SearchModel.StudentName, 
            SearchModel.Weight, 
            SearchModel.Height,
            SearchModel.Sex,
            currentPage,    
            pageSize 
        );
        healthProfiles = paginatedResult.Items;
        totalItems = paginatedResult.TotalCount;
        isLoading = false;
    }
    private async Task SearchAsync()
    {
        currentPage = 1;
        await LoadDataAsync();
    }
    private async Task FilterBySex(bool? sex)
    {
        currentPage = 1;
        SearchModel.Sex = sex;
        await LoadDataAsync();
    }

    private List<int> VisiblePageNumbers
    {
        get
        {
            var pages = new List<int>();

            int startPage;
            int endPage;

            if (TotalPages <= MaxVisiblePages)
            {
                startPage = 1;
                endPage = TotalPages;
            }
            else
            {
                var middlePages = MaxVisiblePages / 2;
                startPage = currentPage - middlePages;
                endPage = currentPage + middlePages;

                if (startPage < 1)
                {
                    startPage = 1;
                    endPage = MaxVisiblePages;
                }

                if (endPage > TotalPages)
                {
                    endPage = TotalPages;
                    startPage = TotalPages - MaxVisiblePages + 1;
                }
            }

            for (var i = startPage; i <= endPage; i++)
            {
                pages.Add(i);
            }

            return pages;
        }
    }

    private async Task ChangePageAsync(int pageNumber)
    {
        if (pageNumber < 1 || pageNumber > TotalPages)
        {
            return;
        }
        
        currentPage = pageNumber;
        await LoadDataAsync();
    }
}
